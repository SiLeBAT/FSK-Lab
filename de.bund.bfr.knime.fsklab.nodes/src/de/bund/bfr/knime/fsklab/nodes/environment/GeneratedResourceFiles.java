package de.bund.bfr.knime.fsklab.nodes.environment;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import de.bund.bfr.knime.fsklab.nodes.ScriptHandler;
import de.bund.bfr.knime.fsklab.v1_9.FskPortObject;
import de.bund.bfr.metadata.swagger.Parameter;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import metadata.SwaggerUtil;
import org.knime.core.node.ExecutionContext;
import org.knime.core.node.NodeLogger;
import org.knime.core.util.FileUtil;



/**
 * File management class, that handles the storage of resource files generated by the Runner Node.
 * Paths to resource files are copied to a temporary folder.
 * 
 * @author SchueleT ,BfR, Berlin.
 */

@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY)
@JsonAutoDetect(fieldVisibility = Visibility.ANY)
public class GeneratedResourceFiles {

  /** Paths of the generated resource files. */
  private List<String> resourceFiles;

  private static NodeLogger logger = NodeLogger.getLogger("Fskx Runner Node Model");

  /**
   * Generate the resourceFiles list to temporarily store files generated by the model script during
   * execution.
   */
  public GeneratedResourceFiles() {

    // initialize list of resource file paths
    this.resourceFiles = new ArrayList<>();
  }



  /**
   * Adds a file(absolute path) generated by the model execution (FSK Runner) to the list.
   */
  public void addResourceFile(File file) {

    String resourceFolder = "GeneratedResources";

    try {

      File tempDir = FileUtil.createTempDir(resourceFolder);
      final File resourceFile = new File(tempDir.getAbsolutePath(), file.getName());

      FileUtil.copy(file, resourceFile);

      this.resourceFiles.add(resourceFile.getAbsolutePath());

    } catch (Exception e) {
      logger.info("resource File Error: " + e);
    }

  }

  /**
   * Returns a list of file paths pointing to the files that were generated by the model previously.
   * The files might be in a temporary folder or in the /internal folder of the Runner node that
   * created the files.
   * 
   */
  public List<Path> getResourcePaths() {

    List<Path> resourcePaths =
        this.resourceFiles.stream().map(Paths::get).collect(Collectors.toList());


    // Validate the paths of the files:
    // Check if files are in temporary folder
    validatePaths(resourcePaths);

    return resourcePaths;
  }

  /**
   * Validate the paths of the generated resource files: If the workflow hasn't been saved, all
   * resource files are in the place where they were originally: temporary folder. Files that no
   * longer exist will be removed from the list.
   * 
   * @param resourcePaths list of temporarily saved generated resource files 
   */
  private void validatePaths(List<Path> resourcePaths) {



    for (int i = 0; i < resourcePaths.size(); i++) {
      Path oldPath = resourcePaths.get(i);

      if (Files.notExists(oldPath, LinkOption.NOFOLLOW_LINKS)) {
        resourcePaths.remove(oldPath);
      }
    }
  }


  /**
   * Static method to take care of saving the generated files after a model has been executed.
   * If a model contains an output parameter with the type FILE, then this output parameter has the
   * file name as its value. e.g.: Parameter myOutput >> myOutput = "output_1.csv"
   * This value is retrieved and a full path to the file is created. Then the file is "added" to the
   * GeneratedResourceFiles object.
   */
  public static GeneratedResourceFiles saveGeneratedResourceFiles(FskPortObject fskObj,
      Optional<Path> workingDirectory, ExecutionContext exec, ScriptHandler handler) {

    List<Parameter> p = SwaggerUtil.getParameter(fskObj.modelMetadata);

    // get output parameters that have "file" as a data type
    List<Parameter> outParams =
        p.stream()
            .filter(id -> id.getClassification().equals(Parameter.ClassificationEnum.OUTPUT)
                && id.getDataType().equals(Parameter.DataTypeEnum.FILE))
            .collect(Collectors.toList());

    GeneratedResourceFiles generatedResourceFiles = new GeneratedResourceFiles();
    List<String> outputFiles = new ArrayList<>();

    // evaluate the output parameters to get the name of the generated files.
    try {

      for (Parameter outParam : outParams) {

        String[] eval = handler.runScript(outParam.getId(), exec, true);
        outputFiles.addAll(Arrays.asList(eval));
      }

      // There must always be a working directory!
      if (workingDirectory.isPresent()) {
        String wd = workingDirectory.get().toString();
        outputFiles.forEach(entry -> generatedResourceFiles.addResourceFile(new File(wd, entry)));
      }


    } catch (Exception e) {
      logger.info("Output Parameter is not a file: " + e);
    }

    return generatedResourceFiles;

  }
}
