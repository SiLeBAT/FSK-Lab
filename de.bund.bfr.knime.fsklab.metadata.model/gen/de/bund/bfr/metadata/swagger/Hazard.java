/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.bund.bfr.metadata.swagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
/**
 * Hazard
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-28T11:01:15.480200615Z[Etc/UTC]")
public class Hazard {
  @SerializedName("maximumResidueLimit")
  private String maximumResidueLimit = null;

  @SerializedName("sourceOfContamination")
  private String sourceOfContamination = null;

  @SerializedName("indSum")
  private String indSum = null;

  @SerializedName("acceptableOperatorsExposureLevel")
  private String acceptableOperatorsExposureLevel = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("adverseEffect")
  private String adverseEffect = null;

  @SerializedName("unit")
  private String unit = null;

  @SerializedName("noObservedAdverseAffectLevel")
  private String noObservedAdverseAffectLevel = null;

  @SerializedName("acuteReferenceDose")
  private String acuteReferenceDose = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("lowestObservedAdverseAffectLevel")
  private String lowestObservedAdverseAffectLevel = null;

  @SerializedName("benchmarkDose")
  private String benchmarkDose = null;

  @SerializedName("acceptableDailyIntake")
  private String acceptableDailyIntake = null;

  public Hazard maximumResidueLimit(String maximumResidueLimit) {
    this.maximumResidueLimit = maximumResidueLimit;
    return this;
  }

   /**
   * International regulations and permissible maximum residue levels in food and drinking water
   * @return maximumResidueLimit
  **/
  @ApiModelProperty(value = "International regulations and permissible maximum residue levels in food and drinking water")
  public String getMaximumResidueLimit() {
    return maximumResidueLimit;
  }

  public void setMaximumResidueLimit(String maximumResidueLimit) {
    this.maximumResidueLimit = maximumResidueLimit;
  }

  public Hazard sourceOfContamination(String sourceOfContamination) {
    this.sourceOfContamination = sourceOfContamination;
    return this;
  }

   /**
   * rigin of the contamination, source
   * @return sourceOfContamination
  **/
  @ApiModelProperty(value = "rigin of the contamination, source")
  public String getSourceOfContamination() {
    return sourceOfContamination;
  }

  public void setSourceOfContamination(String sourceOfContamination) {
    this.sourceOfContamination = sourceOfContamination;
  }

  public Hazard indSum(String indSum) {
    this.indSum = indSum;
    return this;
  }

   /**
   * Define if the parameter reported is an individual residue/analyte, a summed residue definition or part of a sum a summed residue definition
   * @return indSum
  **/
  @ApiModelProperty(value = "Define if the parameter reported is an individual residue/analyte, a summed residue definition or part of a sum a summed residue definition")
  public String getIndSum() {
    return indSum;
  }

  public void setIndSum(String indSum) {
    this.indSum = indSum;
  }

  public Hazard acceptableOperatorsExposureLevel(String acceptableOperatorsExposureLevel) {
    this.acceptableOperatorsExposureLevel = acceptableOperatorsExposureLevel;
    return this;
  }

   /**
   * Maximum amount of active substance to which the operator may be exposed without any adverse health effects. The AOEL is expressed as milligrams of the chemical per kilogram body weight of the operator
   * @return acceptableOperatorsExposureLevel
  **/
  @ApiModelProperty(value = "Maximum amount of active substance to which the operator may be exposed without any adverse health effects. The AOEL is expressed as milligrams of the chemical per kilogram body weight of the operator")
  public String getAcceptableOperatorsExposureLevel() {
    return acceptableOperatorsExposureLevel;
  }

  public void setAcceptableOperatorsExposureLevel(String acceptableOperatorsExposureLevel) {
    this.acceptableOperatorsExposureLevel = acceptableOperatorsExposureLevel;
  }

  public Hazard description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the hazard for which the model or data applies
   * @return description
  **/
  @ApiModelProperty(value = "Description of the hazard for which the model or data applies")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Hazard type(String type) {
    this.type = type;
    return this;
  }

   /**
   * General classification of the hazard for which the model or data applies
   * @return type
  **/
  @ApiModelProperty(value = "General classification of the hazard for which the model or data applies")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Hazard adverseEffect(String adverseEffect) {
    this.adverseEffect = adverseEffect;
    return this;
  }

   /**
   * Adverse effect induced by hazard about morbidity, mortality, and etcetera
   * @return adverseEffect
  **/
  @ApiModelProperty(value = "Adverse effect induced by hazard about morbidity, mortality, and etcetera")
  public String getAdverseEffect() {
    return adverseEffect;
  }

  public void setAdverseEffect(String adverseEffect) {
    this.adverseEffect = adverseEffect;
  }

  public Hazard unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Unit of the hazard for which the model or data applies
   * @return unit
  **/
  @ApiModelProperty(value = "Unit of the hazard for which the model or data applies")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public Hazard noObservedAdverseAffectLevel(String noObservedAdverseAffectLevel) {
    this.noObservedAdverseAffectLevel = noObservedAdverseAffectLevel;
    return this;
  }

   /**
   * Level of exposure of an organism, found by experiment or observation, at which there is no biologically or statistically significant increase in the frequency or severity of any adverse effects in the exposed population when compared to its appropriate control
   * @return noObservedAdverseAffectLevel
  **/
  @ApiModelProperty(value = "Level of exposure of an organism, found by experiment or observation, at which there is no biologically or statistically significant increase in the frequency or severity of any adverse effects in the exposed population when compared to its appropriate control")
  public String getNoObservedAdverseAffectLevel() {
    return noObservedAdverseAffectLevel;
  }

  public void setNoObservedAdverseAffectLevel(String noObservedAdverseAffectLevel) {
    this.noObservedAdverseAffectLevel = noObservedAdverseAffectLevel;
  }

  public Hazard acuteReferenceDose(String acuteReferenceDose) {
    this.acuteReferenceDose = acuteReferenceDose;
    return this;
  }

   /**
   * An estimate (with uncertainty spanning perhaps an order of magnitude) of a daily oral exposure for an acute duration (24 hours or less) to the human population (including sensitive subgroups) that is likely to be without an appreciable risk of deleterious effects during a lifetime
   * @return acuteReferenceDose
  **/
  @ApiModelProperty(value = "An estimate (with uncertainty spanning perhaps an order of magnitude) of a daily oral exposure for an acute duration (24 hours or less) to the human population (including sensitive subgroups) that is likely to be without an appreciable risk of deleterious effects during a lifetime")
  public String getAcuteReferenceDose() {
    return acuteReferenceDose;
  }

  public void setAcuteReferenceDose(String acuteReferenceDose) {
    this.acuteReferenceDose = acuteReferenceDose;
  }

  public Hazard name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the hazard (agent, contaminant, chemical) for which the data or model applies
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the hazard (agent, contaminant, chemical) for which the data or model applies")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Hazard lowestObservedAdverseAffectLevel(String lowestObservedAdverseAffectLevel) {
    this.lowestObservedAdverseAffectLevel = lowestObservedAdverseAffectLevel;
    return this;
  }

   /**
   * Lowest concentration or amount of a substance found by experiment or observation that causes an adverse alteration of morphology, function, capacity, growth, development, or lifespan of a target organism distinguished from normal organisms of the same species under defined conditions of exposure
   * @return lowestObservedAdverseAffectLevel
  **/
  @ApiModelProperty(value = "Lowest concentration or amount of a substance found by experiment or observation that causes an adverse alteration of morphology, function, capacity, growth, development, or lifespan of a target organism distinguished from normal organisms of the same species under defined conditions of exposure")
  public String getLowestObservedAdverseAffectLevel() {
    return lowestObservedAdverseAffectLevel;
  }

  public void setLowestObservedAdverseAffectLevel(String lowestObservedAdverseAffectLevel) {
    this.lowestObservedAdverseAffectLevel = lowestObservedAdverseAffectLevel;
  }

  public Hazard benchmarkDose(String benchmarkDose) {
    this.benchmarkDose = benchmarkDose;
    return this;
  }

   /**
   * A dose or concentration that produces a predetermined change in response rate of an adverse effect (called the benchmark response or BMR) compared to background
   * @return benchmarkDose
  **/
  @ApiModelProperty(value = "A dose or concentration that produces a predetermined change in response rate of an adverse effect (called the benchmark response or BMR) compared to background")
  public String getBenchmarkDose() {
    return benchmarkDose;
  }

  public void setBenchmarkDose(String benchmarkDose) {
    this.benchmarkDose = benchmarkDose;
  }

  public Hazard acceptableDailyIntake(String acceptableDailyIntake) {
    this.acceptableDailyIntake = acceptableDailyIntake;
    return this;
  }

   /**
   * Measure of amount of a specific substance in food or in drinking water tahta can be ingested (orally) on a daily basis over a lifetime without an appreciable health risk
   * @return acceptableDailyIntake
  **/
  @ApiModelProperty(value = "Measure of amount of a specific substance in food or in drinking water tahta can be ingested (orally) on a daily basis over a lifetime without an appreciable health risk")
  public String getAcceptableDailyIntake() {
    return acceptableDailyIntake;
  }

  public void setAcceptableDailyIntake(String acceptableDailyIntake) {
    this.acceptableDailyIntake = acceptableDailyIntake;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hazard hazard = (Hazard) o;
    return Objects.equals(this.maximumResidueLimit, hazard.maximumResidueLimit) &&
        Objects.equals(this.sourceOfContamination, hazard.sourceOfContamination) &&
        Objects.equals(this.indSum, hazard.indSum) &&
        Objects.equals(this.acceptableOperatorsExposureLevel, hazard.acceptableOperatorsExposureLevel) &&
        Objects.equals(this.description, hazard.description) &&
        Objects.equals(this.type, hazard.type) &&
        Objects.equals(this.adverseEffect, hazard.adverseEffect) &&
        Objects.equals(this.unit, hazard.unit) &&
        Objects.equals(this.noObservedAdverseAffectLevel, hazard.noObservedAdverseAffectLevel) &&
        Objects.equals(this.acuteReferenceDose, hazard.acuteReferenceDose) &&
        Objects.equals(this.name, hazard.name) &&
        Objects.equals(this.lowestObservedAdverseAffectLevel, hazard.lowestObservedAdverseAffectLevel) &&
        Objects.equals(this.benchmarkDose, hazard.benchmarkDose) &&
        Objects.equals(this.acceptableDailyIntake, hazard.acceptableDailyIntake);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumResidueLimit, sourceOfContamination, indSum, acceptableOperatorsExposureLevel, description, type, adverseEffect, unit, noObservedAdverseAffectLevel, acuteReferenceDose, name, lowestObservedAdverseAffectLevel, benchmarkDose, acceptableDailyIntake);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hazard {\n");
    
    sb.append("    maximumResidueLimit: ").append(toIndentedString(maximumResidueLimit)).append("\n");
    sb.append("    sourceOfContamination: ").append(toIndentedString(sourceOfContamination)).append("\n");
    sb.append("    indSum: ").append(toIndentedString(indSum)).append("\n");
    sb.append("    acceptableOperatorsExposureLevel: ").append(toIndentedString(acceptableOperatorsExposureLevel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    adverseEffect: ").append(toIndentedString(adverseEffect)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    noObservedAdverseAffectLevel: ").append(toIndentedString(noObservedAdverseAffectLevel)).append("\n");
    sb.append("    acuteReferenceDose: ").append(toIndentedString(acuteReferenceDose)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    lowestObservedAdverseAffectLevel: ").append(toIndentedString(lowestObservedAdverseAffectLevel)).append("\n");
    sb.append("    benchmarkDose: ").append(toIndentedString(benchmarkDose)).append("\n");
    sb.append("    acceptableDailyIntake: ").append(toIndentedString(acceptableDailyIntake)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
