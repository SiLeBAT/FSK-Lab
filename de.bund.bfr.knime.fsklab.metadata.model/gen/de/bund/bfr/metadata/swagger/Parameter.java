/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.bund.bfr.metadata.swagger;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.bund.bfr.metadata.swagger.Reference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
/**
 * Parameter
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-28T11:01:15.480200615Z[Etc/UTC]")
public class Parameter {
  @SerializedName("subject")
  private String subject = null;

  @SerializedName("maxValue")
  private String maxValue = null;

  /**
   * Information on the data format of the parameter, e.g. if it is a categorical variable: int, double, array of size x,y,z 
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    INTEGER("INTEGER"),
    DOUBLE("DOUBLE"),
    NUMBER("NUMBER"),
    DATE("DATE"),
    FILE("FILE"),
    BOOLEAN("BOOLEAN"),
    VECTOROFNUMBERS("VECTOROFNUMBERS"),
    VECTOROFSTRINGS("VECTOROFSTRINGS"),
    MATRIXOFNUMBERS("MATRIXOFNUMBERS"),
    MATRIXOFSTRINGS("MATRIXOFSTRINGS"),
    OBJECT("OBJECT"),
    STRING("STRING");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DataTypeEnum fromValue(String input) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DataTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("dataType")
  private DataTypeEnum dataType = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("source")
  private String source = null;

  /**
   * General classification of the parameter (e.g. Input, Constant, Output etc)
   */
  @JsonAdapter(ClassificationEnum.Adapter.class)
  public enum ClassificationEnum {
    CONSTANT("CONSTANT"),
    INPUT("INPUT"),
    OUTPUT("OUTPUT");

    private String value;

    ClassificationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ClassificationEnum fromValue(String input) {
      for (ClassificationEnum b : ClassificationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ClassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ClassificationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ClassificationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("classification")
  private ClassificationEnum classification = null;

  @SerializedName("distribution")
  private String distribution = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("variabilitySubject")
  private String variabilitySubject = null;

  @SerializedName("reference")
  private Reference reference = null;

  @SerializedName("unit")
  private String unit = null;

  @SerializedName("minValue")
  private String minValue = null;

  @SerializedName("unitCategory")
  private String unitCategory = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("value")
  private String value = null;

  public Parameter subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Scope of the parameter, e.g. if it refers to an animal, a batch of animals, a batch of products, a carcass, a carcass skin etc
   * @return subject
  **/
  @ApiModelProperty(value = "Scope of the parameter, e.g. if it refers to an animal, a batch of animals, a batch of products, a carcass, a carcass skin etc")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public Parameter maxValue(String maxValue) {
    this.maxValue = maxValue;
    return this;
  }

   /**
   * Numerical value of the maximum limit of the parameter that determines the range of applicability for which the model applies
   * @return maxValue
  **/
  @ApiModelProperty(value = "Numerical value of the maximum limit of the parameter that determines the range of applicability for which the model applies")
  public String getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(String maxValue) {
    this.maxValue = maxValue;
  }

  public Parameter dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Information on the data format of the parameter, e.g. if it is a categorical variable: int, double, array of size x,y,z 
   * @return dataType
  **/
  @ApiModelProperty(required = true, value = "Information on the data format of the parameter, e.g. if it is a categorical variable: int, double, array of size x,y,z ")
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }

  public Parameter description(String description) {
    this.description = description;
    return this;
  }

   /**
   * General description of the parameter
   * @return description
  **/
  @ApiModelProperty(value = "General description of the parameter")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Parameter source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Information on the type of knowledge used to define the parameter value
   * @return source
  **/
  @ApiModelProperty(value = "Information on the type of knowledge used to define the parameter value")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public Parameter classification(ClassificationEnum classification) {
    this.classification = classification;
    return this;
  }

   /**
   * General classification of the parameter (e.g. Input, Constant, Output etc)
   * @return classification
  **/
  @ApiModelProperty(required = true, value = "General classification of the parameter (e.g. Input, Constant, Output etc)")
  public ClassificationEnum getClassification() {
    return classification;
  }

  public void setClassification(ClassificationEnum classification) {
    this.classification = classification;
  }

  public Parameter distribution(String distribution) {
    this.distribution = distribution;
    return this;
  }

   /**
   * Distribution describing the parameter variabilty. If no distribution selected this means the value provided in &#x27;Parameter value&#x27; is a point estimate. In case a distribution is selected the value provided in &#x27;Parameter value&#x27; is a string that the model code can parse in order to sample from the named distribution
   * @return distribution
  **/
  @ApiModelProperty(value = "Distribution describing the parameter variabilty. If no distribution selected this means the value provided in 'Parameter value' is a point estimate. In case a distribution is selected the value provided in 'Parameter value' is a string that the model code can parse in order to sample from the named distribution")
  public String getDistribution() {
    return distribution;
  }

  public void setDistribution(String distribution) {
    this.distribution = distribution;
  }

  public Parameter error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error of the parameter value
   * @return error
  **/
  @ApiModelProperty(value = "Error of the parameter value")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public Parameter variabilitySubject(String variabilitySubject) {
    this.variabilitySubject = variabilitySubject;
    return this;
  }

   /**
   * Information on which the variability is described. It can be variability between broiler in a flock, variability between all meat packages sold in Denmark, variability between days, etc.
   * @return variabilitySubject
  **/
  @ApiModelProperty(value = "Information on which the variability is described. It can be variability between broiler in a flock, variability between all meat packages sold in Denmark, variability between days, etc.")
  public String getVariabilitySubject() {
    return variabilitySubject;
  }

  public void setVariabilitySubject(String variabilitySubject) {
    this.variabilitySubject = variabilitySubject;
  }

  public Parameter reference(Reference reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @ApiModelProperty(value = "")
  public Reference getReference() {
    return reference;
  }

  public void setReference(Reference reference) {
    this.reference = reference;
  }

  public Parameter unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Unit of the parameter
   * @return unit
  **/
  @ApiModelProperty(required = true, value = "Unit of the parameter")
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public Parameter minValue(String minValue) {
    this.minValue = minValue;
    return this;
  }

   /**
   * Numerical value of the minimum limit of the parameter that determines the range of applicability for which the model applies
   * @return minValue
  **/
  @ApiModelProperty(value = "Numerical value of the minimum limit of the parameter that determines the range of applicability for which the model applies")
  public String getMinValue() {
    return minValue;
  }

  public void setMinValue(String minValue) {
    this.minValue = minValue;
  }

  public Parameter unitCategory(String unitCategory) {
    this.unitCategory = unitCategory;
    return this;
  }

   /**
   * General classification of the parameter unit
   * @return unitCategory
  **/
  @ApiModelProperty(value = "General classification of the parameter unit")
  public String getUnitCategory() {
    return unitCategory;
  }

  public void setUnitCategory(String unitCategory) {
    this.unitCategory = unitCategory;
  }

  public Parameter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A name given to the parameter
   * @return name
  **/
  @ApiModelProperty(required = true, value = "A name given to the parameter")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Parameter id(String id) {
    this.id = id;
    return this;
  }

   /**
   * An unambiguous ID given to each of the parameters - preferably autogenerated by a software tool and compatible with SBML ID requirements, only letters from A to Z, numbers and &#x27;_&#x27;
   * @return id
  **/
  @ApiModelProperty(required = true, value = "An unambiguous ID given to each of the parameters - preferably autogenerated by a software tool and compatible with SBML ID requirements, only letters from A to Z, numbers and '_'")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Parameter value(String value) {
    this.value = value;
    return this;
  }

   /**
   * A default value for the parameter. This is mandatory (needs to be provided) for all parameters of type &#x27;Input&#x27;
   * @return value
  **/
  @ApiModelProperty(value = "A default value for the parameter. This is mandatory (needs to be provided) for all parameters of type 'Input'")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parameter parameter = (Parameter) o;
    return Objects.equals(this.subject, parameter.subject) &&
        Objects.equals(this.maxValue, parameter.maxValue) &&
        Objects.equals(this.dataType, parameter.dataType) &&
        Objects.equals(this.description, parameter.description) &&
        Objects.equals(this.source, parameter.source) &&
        Objects.equals(this.classification, parameter.classification) &&
        Objects.equals(this.distribution, parameter.distribution) &&
        Objects.equals(this.error, parameter.error) &&
        Objects.equals(this.variabilitySubject, parameter.variabilitySubject) &&
        Objects.equals(this.reference, parameter.reference) &&
        Objects.equals(this.unit, parameter.unit) &&
        Objects.equals(this.minValue, parameter.minValue) &&
        Objects.equals(this.unitCategory, parameter.unitCategory) &&
        Objects.equals(this.name, parameter.name) &&
        Objects.equals(this.id, parameter.id) &&
        Objects.equals(this.value, parameter.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, maxValue, dataType, description, source, classification, distribution, error, variabilitySubject, reference, unit, minValue, unitCategory, name, id, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parameter {\n");
    
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    variabilitySubject: ").append(toIndentedString(variabilitySubject)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    unitCategory: ").append(toIndentedString(unitCategory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
