<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="./js.png" type="Manipulator" xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v2.8 http://knime.org/node/v2.8.xsd">
	<name>JavaScript Editor</name>
	
	<shortDescription>
	    Executes JavaScript code to generate a view.
	</shortDescription>
	
	<fullDescription>
		<intro>		
    	    <p>Executes JavaScript code to generate a view. The code in the script editor is executed when displayed
            in the view (right-click -&gt; Interactive View) or in the KNIME server web portal. 
	       	</p>
            <p>Within the java script code block you have access to the input table and can use a set of predefined
            libraries to generate the view.</p>
            <p>Note, this node is currently under development. Future versions of the node will have more functionality,
            including the ability to define and use templates and to generate a static view/image output.</p>            
		</intro>
		<option name="Flow Variables">
		    <p>
		      The list contains the flow variables that are currently available at the node input. Double clicking any of 
		      the entries will insert the respective identifier at the current cursor position in the JavaScript editor.
		    </p>
		</option>
		<option name="Dependencies">
		    <p>
		      Choose from the list of available JavaScript library dependencies. Any entries selected here are available at 
		      runtime of the view. Note that this list will be expanded in the future.
		    </p>
		</option>
		<option name="CSS">
		    <p>Enter optional CSS instructions for styling the view.</p>
		    <p><b>Example</b></p>
		    <p>Change the standard font used for rendering for the whole document:</p>
		    <i>
		      html, body {font-family: sans-serif;}
		    </i>
		</option>
		<option name="JavaScript">
			<p>Enter the JavaScript code to be executed. All HTML elements have to be created in the JavaScript and appended to 
			the <i>&lt;body&gt;</i> element.</p>
			<p>If data is available at the input port, a JavaScript object <i>knimeDataTable</i> is automatically created and populated.<br/>
			   The methods available on this object are:
			</p>
			<ul>
			   <li><i>knimeDataTable.getNumRows();</i> Retrieve the amount of rows contained in the table.</li>
			   <li><i>knimeDataTable.getNumColumns();</i> Retrieve the amount of columns contained in the table.</li>
			   <li><i>knimeDataTable.getColumnNames();</i> Retrieve the column names in a string array.</li>
			   <li><i>knimeDataTable.getColumnTypes();</i> Retrieve the converted JavaScript column types in a string array. These can be <i>Boolean</i>, 
			         <i>Number</i>, <i>String</i>, <i>SVG</i>, <i>PNG</i> or <i>Undefined</i>.</li>
			   <li><i>knimeDataTable.getPossibleValues();</i> Retrieve an array with possible values from the data table spec.</li>
			   <li><i>knimeDataTable.getRowColors();</i> Retrieve a string array with CSS-style color information for each row.</li>
			   <li><i>knimeDataTable.getRows();</i> Retrieve an array comprising all rows of the data table.</li>
			   <li><i>knimeDataTable.getColumn(columnID);</i> Retrieve an array of all values contained in the column with the given ID. Note that 
			         this operation can be computationally expensive as data is stored per row and has to be converted.</li>
			</ul>
			<p><b>Example</b></p>
			<p>Loop over all values contained in the table object and process only number types:</p>
			<pre>var rows = knimeDataTable.getRows();
for (var rowID = 0; rowID &lt; knimeDataTable.getNumRows(); rowID++) {
    var row = rows[rowID];
    for (var colID = 0; colID &lt; knimeDataTable.getNumColumns(); colID++) {
        if (knimeDataTable.getColumnTypes()[colID] === 'number') {
            var value = row.data[colID];
            // process value
        }
    }
}</pre>
		</option>
	</fullDescription>
	
	<interactiveView name="Javascript editor"></interactiveView>
	<ports>
		<inPort index="0" name="Input table" optional="false"></inPort>
		<outPort name="Output table" index="0">
		</outPort>
	</ports>	
</knimeNode>